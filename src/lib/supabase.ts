
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://thqxrpvbnrbdcyjtcgwo.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRocXhycHZibm5yYmRjeWp0Y2d3byIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzEyNTEzMjEzLCJleHAiOjIwMjgwODkyMTN9.C4-pzdZ59Nd0z_jVBTxpPyxX1WD1FLOjEUSNL1eDZR8';

console.warn('‚ö†Ô∏è Usando chaves padr√£o do Supabase. Configure as vari√°veis de ambiente para produ√ß√£o.');
console.log('URL Supabase:', supabaseUrl);

// Inicializar o cliente Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'harmonia-admin-auth', // Chave dedicada para sess√£o administrativa
  },
});

// Adicionando fun√ß√£o para diagn√≥stico de conex√£o
export const testSupabaseConnection = async () => {
  try {
    console.log('Testando conex√£o com o Supabase...');
    
    // Verificar se a URL est√° correta
    if (!supabaseUrl || !supabaseUrl.includes('https://')) {
      return { 
        connected: false, 
        error: 'URL do Supabase inv√°lida ou n√£o configurada'
      };
    }
    
    // Verificar se a chave an√¥nima est√° presente
    if (!supabaseAnonKey) {
      return { 
        connected: false, 
        error: 'Chave an√¥nima do Supabase n√£o configurada'
      };
    }
    
    // Teste simples: buscar a vers√£o do Supabase
    try {
      const { data: versionData, error: versionError } = await supabase.rpc('version');
      
      if (versionError) {
        console.error('Erro ao verificar vers√£o do Supabase:', versionError);
        
        // Tentar um teste alternativo com uma tabela
        try {
          const { data, error } = await supabase.from('system_settings').select('count(*)', { count: 'exact' });
          
          if (error) {
            console.error('Erro de conex√£o com o Supabase (tabela):', error);
            return { 
              connected: false, 
              error: `Falha na conex√£o: ${error.message}. C√≥digo: ${error.code}`
            };
          }
          
          console.log('Conex√£o com tabela system_settings bem-sucedida!');
          return { connected: true, data };
        } catch (tableErr) {
          console.error('Exce√ß√£o ao testar conex√£o com tabela:', tableErr);
          return { 
            connected: false, 
            error: tableErr instanceof Error ? tableErr.message : 'Erro ao testar tabela' 
          };
        }
      }
      
      console.log('Conex√£o com o Supabase bem-sucedida! Vers√£o:', versionData);
      return { connected: true, data: versionData };
      
    } catch (rpcErr) {
      console.error('Exce√ß√£o ao chamar RPC:', rpcErr);
      
      // Falhou com RPC, tentar com tabela
      try {
        const { data, error } = await supabase.from('system_settings').select('count(*)', { count: 'exact' });
        
        if (error) {
          console.error('Tamb√©m falhou com tabela:', error);
          return { 
            connected: false, 
            error: `Falha em ambos os m√©todos: ${error.message}` 
          };
        }
        
        console.log('Conex√£o bem-sucedida via tabela!');
        return { connected: true, data };
      } catch (finalErr) {
        console.error('Todas as tentativas falharam:', finalErr);
        return { 
          connected: false, 
          error: 'Todas as tentativas de conex√£o falharam' 
        };
      }
    }
  } catch (err) {
    console.error('Exce√ß√£o geral ao testar conex√£o:', err);
    return { 
      connected: false, 
      error: err instanceof Error ? err.message : 'Erro desconhecido' 
    };
  }
};

// Testar autentica√ß√£o espec√≠fica
export const testAuthSettings = async () => {
  try {
    console.log('Verificando configura√ß√µes de autentica√ß√£o...');
    
    // Primeiro, verificar se j√° existe uma sess√£o
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('Erro ao verificar sess√£o:', sessionError);
      return { 
        success: false, 
        error: `Problema com sess√£o: ${sessionError.message}` 
      };
    }
    
    // Se n√£o houver sess√£o ativa, testar o servi√ßo de autentica√ß√£o
    if (!sessionData?.session) {
      try {
        // Apenas verificar se o servi√ßo de autentica√ß√£o responde
        const { data, error } = await supabase.auth.getUser();
        
        if (error && error.status !== 401) {  // 401 √© esperado quando n√£o autenticado
          console.error('Erro ao verificar servi√ßo de autentica√ß√£o:', error);
          return { 
            success: false, 
            error: `Servi√ßo de autentica√ß√£o com problema: ${error.message}` 
          };
        }
        
        return { 
          success: true, 
          message: 'Servi√ßo de autentica√ß√£o est√° respondendo normalmente' 
        };
      } catch (authErr) {
        console.error('Exce√ß√£o ao verificar autentica√ß√£o:', authErr);
        return { 
          success: false, 
          error: 'Falha ao acessar o servi√ßo de autentica√ß√£o' 
        };
      }
    }
    
    return { 
      success: true, 
      message: 'Usu√°rio autenticado', 
      user: sessionData.session.user.email 
    };
  } catch (err) {
    console.error('Exce√ß√£o ao verificar configura√ß√µes de autentica√ß√£o:', err);
    return { 
      success: false, 
      error: err instanceof Error ? err.message : 'Erro desconhecido' 
    };
  }
};

console.log('üîå Cliente Supabase inicializado.');

// Servi√ßo de email usando Edge Functions do Supabase
export const emailService = {
  async sendBriefingConfirmation(email: string, name: string) {
    try {
      console.log('Enviando confirma√ß√£o de briefing para:', email);
      
      const response = await supabase.functions.invoke('send-email', {
        body: {
          to: email,
          subject: 'Briefing Recebido - harmonIA',
          html: `
            <h1>Ol√° ${name},</h1>
            <p>Recebemos seu briefing com sucesso! Nossa equipe j√° est√° analisando suas informa√ß√µes.</p>
            <p>Entraremos em contato em breve para discutir os pr√≥ximos passos.</p>
            <p>Atenciosamente,<br>Equipe harmonIA</p>
          `,
        },
      });
      
      console.log('Resposta da fun√ß√£o send-email:', response);
      
      if (response.error) {
        throw new Error(response.error.message || 'Falha ao enviar email');
      }
      
      return { success: true };
    } catch (error: any) {
      console.error('Erro ao enviar confirma√ß√£o de briefing:', error);
      return { success: false, error };
    }
  },
  
  async sendPreviewNotification(email: string, name: string, previewUrl: string) {
    try {
      console.log('Enviando notifica√ß√£o de pr√©via para:', email);
      
      const response = await supabase.functions.invoke('send-email', {
        body: {
          to: email,
          subject: 'Novas Pr√©vias Dispon√≠veis - harmonIA',
          content: `
            <h1>Ol√° ${name},</h1>
            <p>Suas pr√©vias j√° est√£o dispon√≠veis para avalia√ß√£o!</p>
            <p>Acesse o link abaixo para ouvir e dar seu feedback:</p>
            <p><a href="${previewUrl}" style="padding: 10px 15px; background-color: #4F46E5; color: white; text-decoration: none; border-radius: 5px;">Ver Pr√©vias</a></p>
            <p>Atenciosamente,<br>Equipe harmonIA</p>
          `,
        },
      });
      
      if (response.error) {
        throw new Error(response.error.message || 'Falha ao enviar email');
      }
      
      return { success: true };
    } catch (error: any) {
      console.error('Erro ao enviar notifica√ß√£o de pr√©via:', error);
      return { success: false, error };
    }
  },
  
  async sendPaymentConfirmation(email: string, name: string, packageName: string) {
    try {
      console.log('Enviando confirma√ß√£o de pagamento para:', email);
      
      const response = await supabase.functions.invoke('send-email', {
        body: {
          to: email,
          subject: 'Pagamento Confirmado - harmonIA',
          content: `
            <h1>Ol√° ${name},</h1>
            <p>Seu pagamento para o pacote "${packageName}" foi confirmado com sucesso!</p>
            <p>Agora podemos dar in√≠cio ao seu projeto. Nossa equipe entrar√° em contato em breve para alinhar os pr√≥ximos passos.</p>
            <p>Atenciosamente,<br>Equipe harmonIA</p>
          `,
        },
      });
      
      if (response.error) {
        throw new Error(response.error.message || 'Falha ao enviar email');
      }
      
      return { success: true };
    } catch (error: any) {
      console.error('Erro ao enviar confirma√ß√£o de pagamento:', error);
      return { success: false, error };
    }
  },
};
